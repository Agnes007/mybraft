// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: braft/raft.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "braft/raft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace braft {

namespace {

const ::google::protobuf::Descriptor* EntryMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntryMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestVoteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestVoteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestVoteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestVoteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendEntriesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendEntriesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendEntriesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendEntriesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstallSnapshotRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstallSnapshotRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstallSnapshotResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstallSnapshotResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeoutNowRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeoutNowRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeoutNowResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeoutNowResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* RaftService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_braft_2fraft_2eproto() {
  protobuf_AddDesc_braft_2fraft_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "braft/raft.proto");
  GOOGLE_CHECK(file != NULL);
  EntryMeta_descriptor_ = file->message_type(0);
  static const int EntryMeta_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryMeta, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryMeta, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryMeta, peers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryMeta, data_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryMeta, old_peers_),
  };
  EntryMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntryMeta_descriptor_,
      EntryMeta::default_instance_,
      EntryMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntryMeta));
  RequestVoteRequest_descriptor_ = file->message_type(1);
  static const int RequestVoteRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRequest, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRequest, peer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRequest, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRequest, last_log_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRequest, last_log_index_),
  };
  RequestVoteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestVoteRequest_descriptor_,
      RequestVoteRequest::default_instance_,
      RequestVoteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestVoteRequest));
  RequestVoteResponse_descriptor_ = file->message_type(2);
  static const int RequestVoteResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteResponse, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteResponse, granted_),
  };
  RequestVoteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestVoteResponse_descriptor_,
      RequestVoteResponse::default_instance_,
      RequestVoteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestVoteResponse));
  AppendEntriesRequest_descriptor_ = file->message_type(3);
  static const int AppendEntriesRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, peer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, prev_log_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, prev_log_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, committed_index_),
  };
  AppendEntriesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendEntriesRequest_descriptor_,
      AppendEntriesRequest::default_instance_,
      AppendEntriesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendEntriesRequest));
  AppendEntriesResponse_descriptor_ = file->message_type(4);
  static const int AppendEntriesResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponse, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponse, last_log_index_),
  };
  AppendEntriesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendEntriesResponse_descriptor_,
      AppendEntriesResponse::default_instance_,
      AppendEntriesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendEntriesResponse));
  SnapshotMeta_descriptor_ = file->message_type(5);
  static const int SnapshotMeta_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMeta, last_included_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMeta, last_included_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMeta, peers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMeta, old_peers_),
  };
  SnapshotMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotMeta_descriptor_,
      SnapshotMeta::default_instance_,
      SnapshotMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotMeta));
  InstallSnapshotRequest_descriptor_ = file->message_type(6);
  static const int InstallSnapshotRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotRequest, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotRequest, peer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotRequest, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotRequest, meta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotRequest, uri_),
  };
  InstallSnapshotRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstallSnapshotRequest_descriptor_,
      InstallSnapshotRequest::default_instance_,
      InstallSnapshotRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstallSnapshotRequest));
  InstallSnapshotResponse_descriptor_ = file->message_type(7);
  static const int InstallSnapshotResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotResponse, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotResponse, success_),
  };
  InstallSnapshotResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstallSnapshotResponse_descriptor_,
      InstallSnapshotResponse::default_instance_,
      InstallSnapshotResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstallSnapshotResponse));
  TimeoutNowRequest_descriptor_ = file->message_type(8);
  static const int TimeoutNowRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeoutNowRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeoutNowRequest, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeoutNowRequest, peer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeoutNowRequest, term_),
  };
  TimeoutNowRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeoutNowRequest_descriptor_,
      TimeoutNowRequest::default_instance_,
      TimeoutNowRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeoutNowRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeoutNowRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeoutNowRequest));
  TimeoutNowResponse_descriptor_ = file->message_type(9);
  static const int TimeoutNowResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeoutNowResponse, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeoutNowResponse, success_),
  };
  TimeoutNowResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeoutNowResponse_descriptor_,
      TimeoutNowResponse::default_instance_,
      TimeoutNowResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeoutNowResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeoutNowResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeoutNowResponse));
  RaftService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_braft_2fraft_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntryMeta_descriptor_, &EntryMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestVoteRequest_descriptor_, &RequestVoteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestVoteResponse_descriptor_, &RequestVoteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendEntriesRequest_descriptor_, &AppendEntriesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendEntriesResponse_descriptor_, &AppendEntriesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotMeta_descriptor_, &SnapshotMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstallSnapshotRequest_descriptor_, &InstallSnapshotRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstallSnapshotResponse_descriptor_, &InstallSnapshotResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeoutNowRequest_descriptor_, &TimeoutNowRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeoutNowResponse_descriptor_, &TimeoutNowResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_braft_2fraft_2eproto() {
  delete EntryMeta::default_instance_;
  delete EntryMeta_reflection_;
  delete RequestVoteRequest::default_instance_;
  delete RequestVoteRequest_reflection_;
  delete RequestVoteResponse::default_instance_;
  delete RequestVoteResponse_reflection_;
  delete AppendEntriesRequest::default_instance_;
  delete AppendEntriesRequest_reflection_;
  delete AppendEntriesResponse::default_instance_;
  delete AppendEntriesResponse_reflection_;
  delete SnapshotMeta::default_instance_;
  delete SnapshotMeta_reflection_;
  delete InstallSnapshotRequest::default_instance_;
  delete InstallSnapshotRequest_reflection_;
  delete InstallSnapshotResponse::default_instance_;
  delete InstallSnapshotResponse_reflection_;
  delete TimeoutNowRequest::default_instance_;
  delete TimeoutNowRequest_reflection_;
  delete TimeoutNowResponse::default_instance_;
  delete TimeoutNowResponse_reflection_;
}

void protobuf_AddDesc_braft_2fraft_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::braft::protobuf_AddDesc_braft_2fenum_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020braft/raft.proto\022\005braft\032\020braft/enum.pr"
    "oto\"m\n\tEntryMeta\022\014\n\004term\030\001 \002(\003\022\036\n\004type\030\002"
    " \002(\0162\020.braft.EntryType\022\r\n\005peers\030\003 \003(\t\022\020\n"
    "\010data_len\030\004 \001(\003\022\021\n\told_peers\030\005 \003(\t\"\207\001\n\022R"
    "equestVoteRequest\022\020\n\010group_id\030\001 \002(\t\022\021\n\ts"
    "erver_id\030\002 \002(\t\022\017\n\007peer_id\030\003 \002(\t\022\014\n\004term\030"
    "\004 \002(\003\022\025\n\rlast_log_term\030\005 \002(\003\022\026\n\016last_log"
    "_index\030\006 \002(\003\"4\n\023RequestVoteResponse\022\014\n\004t"
    "erm\030\001 \002(\003\022\017\n\007granted\030\002 \002(\010\"\305\001\n\024AppendEnt"
    "riesRequest\022\020\n\010group_id\030\001 \002(\t\022\021\n\tserver_"
    "id\030\002 \002(\t\022\017\n\007peer_id\030\003 \002(\t\022\014\n\004term\030\004 \002(\003\022"
    "\025\n\rprev_log_term\030\005 \002(\003\022\026\n\016prev_log_index"
    "\030\006 \002(\003\022!\n\007entries\030\007 \003(\0132\020.braft.EntryMet"
    "a\022\027\n\017committed_index\030\010 \002(\003\"N\n\025AppendEntr"
    "iesResponse\022\014\n\004term\030\001 \002(\003\022\017\n\007success\030\002 \002"
    "(\010\022\026\n\016last_log_index\030\003 \001(\003\"i\n\014SnapshotMe"
    "ta\022\033\n\023last_included_index\030\001 \002(\003\022\032\n\022last_"
    "included_term\030\002 \002(\003\022\r\n\005peers\030\003 \003(\t\022\021\n\tol"
    "d_peers\030\004 \003(\t\"\214\001\n\026InstallSnapshotRequest"
    "\022\020\n\010group_id\030\001 \002(\t\022\021\n\tserver_id\030\002 \002(\t\022\017\n"
    "\007peer_id\030\003 \002(\t\022\014\n\004term\030\004 \002(\003\022!\n\004meta\030\005 \002"
    "(\0132\023.braft.SnapshotMeta\022\013\n\003uri\030\006 \002(\t\"8\n\027"
    "InstallSnapshotResponse\022\014\n\004term\030\001 \002(\003\022\017\n"
    "\007success\030\002 \002(\010\"W\n\021TimeoutNowRequest\022\020\n\010g"
    "roup_id\030\001 \002(\t\022\021\n\tserver_id\030\002 \002(\t\022\017\n\007peer"
    "_id\030\003 \002(\t\022\014\n\004term\030\004 \002(\003\"3\n\022TimeoutNowRes"
    "ponse\022\014\n\004term\030\001 \002(\003\022\017\n\007success\030\002 \002(\0102\373\002\n"
    "\013RaftService\022A\n\010pre_vote\022\031.braft.Request"
    "VoteRequest\032\032.braft.RequestVoteResponse\022"
    "E\n\014request_vote\022\031.braft.RequestVoteReque"
    "st\032\032.braft.RequestVoteResponse\022K\n\016append"
    "_entries\022\033.braft.AppendEntriesRequest\032\034."
    "braft.AppendEntriesResponse\022Q\n\020install_s"
    "napshot\022\035.braft.InstallSnapshotRequest\032\036"
    ".braft.InstallSnapshotResponse\022B\n\013timeou"
    "t_now\022\030.braft.TimeoutNowRequest\032\031.braft."
    "TimeoutNowResponseB\003\200\001\001", 1463);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "braft/raft.proto", &protobuf_RegisterTypes);
  EntryMeta::default_instance_ = new EntryMeta();
  RequestVoteRequest::default_instance_ = new RequestVoteRequest();
  RequestVoteResponse::default_instance_ = new RequestVoteResponse();
  AppendEntriesRequest::default_instance_ = new AppendEntriesRequest();
  AppendEntriesResponse::default_instance_ = new AppendEntriesResponse();
  SnapshotMeta::default_instance_ = new SnapshotMeta();
  InstallSnapshotRequest::default_instance_ = new InstallSnapshotRequest();
  InstallSnapshotResponse::default_instance_ = new InstallSnapshotResponse();
  TimeoutNowRequest::default_instance_ = new TimeoutNowRequest();
  TimeoutNowResponse::default_instance_ = new TimeoutNowResponse();
  EntryMeta::default_instance_->InitAsDefaultInstance();
  RequestVoteRequest::default_instance_->InitAsDefaultInstance();
  RequestVoteResponse::default_instance_->InitAsDefaultInstance();
  AppendEntriesRequest::default_instance_->InitAsDefaultInstance();
  AppendEntriesResponse::default_instance_->InitAsDefaultInstance();
  SnapshotMeta::default_instance_->InitAsDefaultInstance();
  InstallSnapshotRequest::default_instance_->InitAsDefaultInstance();
  InstallSnapshotResponse::default_instance_->InitAsDefaultInstance();
  TimeoutNowRequest::default_instance_->InitAsDefaultInstance();
  TimeoutNowResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_braft_2fraft_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_braft_2fraft_2eproto {
  StaticDescriptorInitializer_braft_2fraft_2eproto() {
    protobuf_AddDesc_braft_2fraft_2eproto();
  }
} static_descriptor_initializer_braft_2fraft_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EntryMeta::kTermFieldNumber;
const int EntryMeta::kTypeFieldNumber;
const int EntryMeta::kPeersFieldNumber;
const int EntryMeta::kDataLenFieldNumber;
const int EntryMeta::kOldPeersFieldNumber;
#endif  // !_MSC_VER

EntryMeta::EntryMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.EntryMeta)
}

void EntryMeta::InitAsDefaultInstance() {
}

EntryMeta::EntryMeta(const EntryMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:braft.EntryMeta)
}

void EntryMeta::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  term_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  data_len_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntryMeta::~EntryMeta() {
  // @@protoc_insertion_point(destructor:braft.EntryMeta)
  SharedDtor();
}

void EntryMeta::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EntryMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntryMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntryMeta_descriptor_;
}

const EntryMeta& EntryMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fraft_2eproto();
  return *default_instance_;
}

EntryMeta* EntryMeta::default_instance_ = NULL;

EntryMeta* EntryMeta::New() const {
  return new EntryMeta;
}

void EntryMeta::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    term_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    data_len_ = GOOGLE_LONGLONG(0);
  }
  peers_.Clear();
  old_peers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntryMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.EntryMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .braft.EntryType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::braft::EntryType_IsValid(value)) {
            set_type(static_cast< ::braft::EntryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_peers;
        break;
      }

      // repeated string peers = 3;
      case 3: {
        if (tag == 26) {
         parse_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peers(this->peers_size() - 1).data(),
            this->peers(this->peers_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peers");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_peers;
        if (input->ExpectTag(32)) goto parse_data_len;
        break;
      }

      // optional int64 data_len = 4;
      case 4: {
        if (tag == 32) {
         parse_data_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_len_)));
          set_has_data_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_old_peers;
        break;
      }

      // repeated string old_peers = 5;
      case 5: {
        if (tag == 42) {
         parse_old_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_old_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->old_peers(this->old_peers_size() - 1).data(),
            this->old_peers(this->old_peers_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "old_peers");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_old_peers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.EntryMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.EntryMeta)
  return false;
#undef DO_
}

void EntryMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.EntryMeta)
  // required int64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->term(), output);
  }

  // required .braft.EntryType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated string peers = 3;
  for (int i = 0; i < this->peers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->peers(i).data(), this->peers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "peers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->peers(i), output);
  }

  // optional int64 data_len = 4;
  if (has_data_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->data_len(), output);
  }

  // repeated string old_peers = 5;
  for (int i = 0; i < this->old_peers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->old_peers(i).data(), this->old_peers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "old_peers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->old_peers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.EntryMeta)
}

::google::protobuf::uint8* EntryMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:braft.EntryMeta)
  // required int64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->term(), target);
  }

  // required .braft.EntryType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated string peers = 3;
  for (int i = 0; i < this->peers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peers(i).data(), this->peers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->peers(i), target);
  }

  // optional int64 data_len = 4;
  if (has_data_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->data_len(), target);
  }

  // repeated string old_peers = 5;
  for (int i = 0; i < this->old_peers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_peers(i).data(), this->old_peers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "old_peers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->old_peers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.EntryMeta)
  return target;
}

int EntryMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->term());
    }

    // required .braft.EntryType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int64 data_len = 4;
    if (has_data_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->data_len());
    }

  }
  // repeated string peers = 3;
  total_size += 1 * this->peers_size();
  for (int i = 0; i < this->peers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->peers(i));
  }

  // repeated string old_peers = 5;
  total_size += 1 * this->old_peers_size();
  for (int i = 0; i < this->old_peers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->old_peers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntryMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntryMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntryMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntryMeta::MergeFrom(const EntryMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  peers_.MergeFrom(from.peers_);
  old_peers_.MergeFrom(from.old_peers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data_len()) {
      set_data_len(from.data_len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntryMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntryMeta::CopyFrom(const EntryMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EntryMeta::Swap(EntryMeta* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(type_, other->type_);
    peers_.Swap(&other->peers_);
    std::swap(data_len_, other->data_len_);
    old_peers_.Swap(&other->old_peers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntryMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntryMeta_descriptor_;
  metadata.reflection = EntryMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestVoteRequest::kGroupIdFieldNumber;
const int RequestVoteRequest::kServerIdFieldNumber;
const int RequestVoteRequest::kPeerIdFieldNumber;
const int RequestVoteRequest::kTermFieldNumber;
const int RequestVoteRequest::kLastLogTermFieldNumber;
const int RequestVoteRequest::kLastLogIndexFieldNumber;
#endif  // !_MSC_VER

RequestVoteRequest::RequestVoteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.RequestVoteRequest)
}

void RequestVoteRequest::InitAsDefaultInstance() {
}

RequestVoteRequest::RequestVoteRequest(const RequestVoteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:braft.RequestVoteRequest)
}

void RequestVoteRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  term_ = GOOGLE_LONGLONG(0);
  last_log_term_ = GOOGLE_LONGLONG(0);
  last_log_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestVoteRequest::~RequestVoteRequest() {
  // @@protoc_insertion_point(destructor:braft.RequestVoteRequest)
  SharedDtor();
}

void RequestVoteRequest::SharedDtor() {
  if (group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_id_;
  }
  if (server_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_id_;
  }
  if (peer_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete peer_id_;
  }
  if (this != default_instance_) {
  }
}

void RequestVoteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestVoteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestVoteRequest_descriptor_;
}

const RequestVoteRequest& RequestVoteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fraft_2eproto();
  return *default_instance_;
}

RequestVoteRequest* RequestVoteRequest::default_instance_ = NULL;

RequestVoteRequest* RequestVoteRequest::New() const {
  return new RequestVoteRequest;
}

void RequestVoteRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestVoteRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(term_, last_log_index_);
    if (has_group_id()) {
      if (group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_id_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        server_id_->clear();
      }
    }
    if (has_peer_id()) {
      if (peer_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        peer_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestVoteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.RequestVoteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }

      // required string server_id = 2;
      case 2: {
        if (tag == 18) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "server_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_peer_id;
        break;
      }

      // required string peer_id = 3;
      case 3: {
        if (tag == 26) {
         parse_peer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_id().data(), this->peer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peer_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_term;
        break;
      }

      // required int64 term = 4;
      case 4: {
        if (tag == 32) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_last_log_term;
        break;
      }

      // required int64 last_log_term = 5;
      case 5: {
        if (tag == 40) {
         parse_last_log_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_log_term_)));
          set_has_last_log_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_last_log_index;
        break;
      }

      // required int64 last_log_index = 6;
      case 6: {
        if (tag == 48) {
         parse_last_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_log_index_)));
          set_has_last_log_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.RequestVoteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.RequestVoteRequest)
  return false;
#undef DO_
}

void RequestVoteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.RequestVoteRequest)
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // required string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_id(), output);
  }

  // required string peer_id = 3;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->peer_id(), output);
  }

  // required int64 term = 4;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->term(), output);
  }

  // required int64 last_log_term = 5;
  if (has_last_log_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->last_log_term(), output);
  }

  // required int64 last_log_index = 6;
  if (has_last_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->last_log_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.RequestVoteRequest)
}

::google::protobuf::uint8* RequestVoteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:braft.RequestVoteRequest)
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // required string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  // required string peer_id = 3;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->peer_id(), target);
  }

  // required int64 term = 4;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->term(), target);
  }

  // required int64 last_log_term = 5;
  if (has_last_log_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->last_log_term(), target);
  }

  // required int64 last_log_index = 6;
  if (has_last_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->last_log_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.RequestVoteRequest)
  return target;
}

int RequestVoteRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
    }

    // required string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

    // required string peer_id = 3;
    if (has_peer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_id());
    }

    // required int64 term = 4;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->term());
    }

    // required int64 last_log_term = 5;
    if (has_last_log_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_log_term());
    }

    // required int64 last_log_index = 6;
    if (has_last_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_log_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestVoteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestVoteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestVoteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestVoteRequest::MergeFrom(const RequestVoteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_peer_id()) {
      set_peer_id(from.peer_id());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_last_log_term()) {
      set_last_log_term(from.last_log_term());
    }
    if (from.has_last_log_index()) {
      set_last_log_index(from.last_log_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestVoteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteRequest::CopyFrom(const RequestVoteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void RequestVoteRequest::Swap(RequestVoteRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(peer_id_, other->peer_id_);
    std::swap(term_, other->term_);
    std::swap(last_log_term_, other->last_log_term_);
    std::swap(last_log_index_, other->last_log_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestVoteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestVoteRequest_descriptor_;
  metadata.reflection = RequestVoteRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestVoteResponse::kTermFieldNumber;
const int RequestVoteResponse::kGrantedFieldNumber;
#endif  // !_MSC_VER

RequestVoteResponse::RequestVoteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.RequestVoteResponse)
}

void RequestVoteResponse::InitAsDefaultInstance() {
}

RequestVoteResponse::RequestVoteResponse(const RequestVoteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:braft.RequestVoteResponse)
}

void RequestVoteResponse::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_LONGLONG(0);
  granted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestVoteResponse::~RequestVoteResponse() {
  // @@protoc_insertion_point(destructor:braft.RequestVoteResponse)
  SharedDtor();
}

void RequestVoteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestVoteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestVoteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestVoteResponse_descriptor_;
}

const RequestVoteResponse& RequestVoteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fraft_2eproto();
  return *default_instance_;
}

RequestVoteResponse* RequestVoteResponse::default_instance_ = NULL;

RequestVoteResponse* RequestVoteResponse::New() const {
  return new RequestVoteResponse;
}

void RequestVoteResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestVoteResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(term_, granted_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestVoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.RequestVoteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_granted;
        break;
      }

      // required bool granted = 2;
      case 2: {
        if (tag == 16) {
         parse_granted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &granted_)));
          set_has_granted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.RequestVoteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.RequestVoteResponse)
  return false;
#undef DO_
}

void RequestVoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.RequestVoteResponse)
  // required int64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->term(), output);
  }

  // required bool granted = 2;
  if (has_granted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->granted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.RequestVoteResponse)
}

::google::protobuf::uint8* RequestVoteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:braft.RequestVoteResponse)
  // required int64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->term(), target);
  }

  // required bool granted = 2;
  if (has_granted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->granted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.RequestVoteResponse)
  return target;
}

int RequestVoteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->term());
    }

    // required bool granted = 2;
    if (has_granted()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestVoteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestVoteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestVoteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestVoteResponse::MergeFrom(const RequestVoteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_granted()) {
      set_granted(from.granted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestVoteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteResponse::CopyFrom(const RequestVoteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestVoteResponse::Swap(RequestVoteResponse* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(granted_, other->granted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestVoteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestVoteResponse_descriptor_;
  metadata.reflection = RequestVoteResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppendEntriesRequest::kGroupIdFieldNumber;
const int AppendEntriesRequest::kServerIdFieldNumber;
const int AppendEntriesRequest::kPeerIdFieldNumber;
const int AppendEntriesRequest::kTermFieldNumber;
const int AppendEntriesRequest::kPrevLogTermFieldNumber;
const int AppendEntriesRequest::kPrevLogIndexFieldNumber;
const int AppendEntriesRequest::kEntriesFieldNumber;
const int AppendEntriesRequest::kCommittedIndexFieldNumber;
#endif  // !_MSC_VER

AppendEntriesRequest::AppendEntriesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.AppendEntriesRequest)
}

void AppendEntriesRequest::InitAsDefaultInstance() {
}

AppendEntriesRequest::AppendEntriesRequest(const AppendEntriesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:braft.AppendEntriesRequest)
}

void AppendEntriesRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  term_ = GOOGLE_LONGLONG(0);
  prev_log_term_ = GOOGLE_LONGLONG(0);
  prev_log_index_ = GOOGLE_LONGLONG(0);
  committed_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendEntriesRequest::~AppendEntriesRequest() {
  // @@protoc_insertion_point(destructor:braft.AppendEntriesRequest)
  SharedDtor();
}

void AppendEntriesRequest::SharedDtor() {
  if (group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_id_;
  }
  if (server_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_id_;
  }
  if (peer_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete peer_id_;
  }
  if (this != default_instance_) {
  }
}

void AppendEntriesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntriesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendEntriesRequest_descriptor_;
}

const AppendEntriesRequest& AppendEntriesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fraft_2eproto();
  return *default_instance_;
}

AppendEntriesRequest* AppendEntriesRequest::default_instance_ = NULL;

AppendEntriesRequest* AppendEntriesRequest::New() const {
  return new AppendEntriesRequest;
}

void AppendEntriesRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AppendEntriesRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(term_, prev_log_index_);
    if (has_group_id()) {
      if (group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_id_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        server_id_->clear();
      }
    }
    if (has_peer_id()) {
      if (peer_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        peer_id_->clear();
      }
    }
    committed_index_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendEntriesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.AppendEntriesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }

      // required string server_id = 2;
      case 2: {
        if (tag == 18) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "server_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_peer_id;
        break;
      }

      // required string peer_id = 3;
      case 3: {
        if (tag == 26) {
         parse_peer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_id().data(), this->peer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peer_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_term;
        break;
      }

      // required int64 term = 4;
      case 4: {
        if (tag == 32) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_prev_log_term;
        break;
      }

      // required int64 prev_log_term = 5;
      case 5: {
        if (tag == 40) {
         parse_prev_log_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prev_log_term_)));
          set_has_prev_log_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_prev_log_index;
        break;
      }

      // required int64 prev_log_index = 6;
      case 6: {
        if (tag == 48) {
         parse_prev_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prev_log_index_)));
          set_has_prev_log_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_entries;
        break;
      }

      // repeated .braft.EntryMeta entries = 7;
      case 7: {
        if (tag == 58) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_entries;
        if (input->ExpectTag(64)) goto parse_committed_index;
        break;
      }

      // required int64 committed_index = 8;
      case 8: {
        if (tag == 64) {
         parse_committed_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &committed_index_)));
          set_has_committed_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.AppendEntriesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.AppendEntriesRequest)
  return false;
#undef DO_
}

void AppendEntriesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.AppendEntriesRequest)
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // required string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_id(), output);
  }

  // required string peer_id = 3;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->peer_id(), output);
  }

  // required int64 term = 4;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->term(), output);
  }

  // required int64 prev_log_term = 5;
  if (has_prev_log_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->prev_log_term(), output);
  }

  // required int64 prev_log_index = 6;
  if (has_prev_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->prev_log_index(), output);
  }

  // repeated .braft.EntryMeta entries = 7;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->entries(i), output);
  }

  // required int64 committed_index = 8;
  if (has_committed_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->committed_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.AppendEntriesRequest)
}

::google::protobuf::uint8* AppendEntriesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:braft.AppendEntriesRequest)
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // required string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  // required string peer_id = 3;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->peer_id(), target);
  }

  // required int64 term = 4;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->term(), target);
  }

  // required int64 prev_log_term = 5;
  if (has_prev_log_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->prev_log_term(), target);
  }

  // required int64 prev_log_index = 6;
  if (has_prev_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->prev_log_index(), target);
  }

  // repeated .braft.EntryMeta entries = 7;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->entries(i), target);
  }

  // required int64 committed_index = 8;
  if (has_committed_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->committed_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.AppendEntriesRequest)
  return target;
}

int AppendEntriesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
    }

    // required string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

    // required string peer_id = 3;
    if (has_peer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_id());
    }

    // required int64 term = 4;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->term());
    }

    // required int64 prev_log_term = 5;
    if (has_prev_log_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->prev_log_term());
    }

    // required int64 prev_log_index = 6;
    if (has_prev_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->prev_log_index());
    }

    // required int64 committed_index = 8;
    if (has_committed_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->committed_index());
    }

  }
  // repeated .braft.EntryMeta entries = 7;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntriesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendEntriesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendEntriesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendEntriesRequest::MergeFrom(const AppendEntriesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_peer_id()) {
      set_peer_id(from.peer_id());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_prev_log_term()) {
      set_prev_log_term(from.prev_log_term());
    }
    if (from.has_prev_log_index()) {
      set_prev_log_index(from.prev_log_index());
    }
    if (from.has_committed_index()) {
      set_committed_index(from.committed_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendEntriesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesRequest::CopyFrom(const AppendEntriesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000bf) != 0x000000bf) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void AppendEntriesRequest::Swap(AppendEntriesRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(peer_id_, other->peer_id_);
    std::swap(term_, other->term_);
    std::swap(prev_log_term_, other->prev_log_term_);
    std::swap(prev_log_index_, other->prev_log_index_);
    entries_.Swap(&other->entries_);
    std::swap(committed_index_, other->committed_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendEntriesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendEntriesRequest_descriptor_;
  metadata.reflection = AppendEntriesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppendEntriesResponse::kTermFieldNumber;
const int AppendEntriesResponse::kSuccessFieldNumber;
const int AppendEntriesResponse::kLastLogIndexFieldNumber;
#endif  // !_MSC_VER

AppendEntriesResponse::AppendEntriesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.AppendEntriesResponse)
}

void AppendEntriesResponse::InitAsDefaultInstance() {
}

AppendEntriesResponse::AppendEntriesResponse(const AppendEntriesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:braft.AppendEntriesResponse)
}

void AppendEntriesResponse::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_LONGLONG(0);
  success_ = false;
  last_log_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendEntriesResponse::~AppendEntriesResponse() {
  // @@protoc_insertion_point(destructor:braft.AppendEntriesResponse)
  SharedDtor();
}

void AppendEntriesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppendEntriesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntriesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendEntriesResponse_descriptor_;
}

const AppendEntriesResponse& AppendEntriesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fraft_2eproto();
  return *default_instance_;
}

AppendEntriesResponse* AppendEntriesResponse::default_instance_ = NULL;

AppendEntriesResponse* AppendEntriesResponse::New() const {
  return new AppendEntriesResponse;
}

void AppendEntriesResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AppendEntriesResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(term_, success_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendEntriesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.AppendEntriesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // required bool success = 2;
      case 2: {
        if (tag == 16) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_last_log_index;
        break;
      }

      // optional int64 last_log_index = 3;
      case 3: {
        if (tag == 24) {
         parse_last_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_log_index_)));
          set_has_last_log_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.AppendEntriesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.AppendEntriesResponse)
  return false;
#undef DO_
}

void AppendEntriesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.AppendEntriesResponse)
  // required int64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->term(), output);
  }

  // required bool success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // optional int64 last_log_index = 3;
  if (has_last_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_log_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.AppendEntriesResponse)
}

::google::protobuf::uint8* AppendEntriesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:braft.AppendEntriesResponse)
  // required int64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->term(), target);
  }

  // required bool success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // optional int64 last_log_index = 3;
  if (has_last_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last_log_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.AppendEntriesResponse)
  return target;
}

int AppendEntriesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->term());
    }

    // required bool success = 2;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional int64 last_log_index = 3;
    if (has_last_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_log_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntriesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendEntriesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendEntriesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendEntriesResponse::MergeFrom(const AppendEntriesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_last_log_index()) {
      set_last_log_index(from.last_log_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendEntriesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesResponse::CopyFrom(const AppendEntriesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AppendEntriesResponse::Swap(AppendEntriesResponse* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(success_, other->success_);
    std::swap(last_log_index_, other->last_log_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendEntriesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendEntriesResponse_descriptor_;
  metadata.reflection = AppendEntriesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SnapshotMeta::kLastIncludedIndexFieldNumber;
const int SnapshotMeta::kLastIncludedTermFieldNumber;
const int SnapshotMeta::kPeersFieldNumber;
const int SnapshotMeta::kOldPeersFieldNumber;
#endif  // !_MSC_VER

SnapshotMeta::SnapshotMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.SnapshotMeta)
}

void SnapshotMeta::InitAsDefaultInstance() {
}

SnapshotMeta::SnapshotMeta(const SnapshotMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:braft.SnapshotMeta)
}

void SnapshotMeta::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  last_included_index_ = GOOGLE_LONGLONG(0);
  last_included_term_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotMeta::~SnapshotMeta() {
  // @@protoc_insertion_point(destructor:braft.SnapshotMeta)
  SharedDtor();
}

void SnapshotMeta::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SnapshotMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotMeta_descriptor_;
}

const SnapshotMeta& SnapshotMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fraft_2eproto();
  return *default_instance_;
}

SnapshotMeta* SnapshotMeta::default_instance_ = NULL;

SnapshotMeta* SnapshotMeta::New() const {
  return new SnapshotMeta;
}

void SnapshotMeta::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SnapshotMeta*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(last_included_index_, last_included_term_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  peers_.Clear();
  old_peers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.SnapshotMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 last_included_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_included_index_)));
          set_has_last_included_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_included_term;
        break;
      }

      // required int64 last_included_term = 2;
      case 2: {
        if (tag == 16) {
         parse_last_included_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_included_term_)));
          set_has_last_included_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_peers;
        break;
      }

      // repeated string peers = 3;
      case 3: {
        if (tag == 26) {
         parse_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peers(this->peers_size() - 1).data(),
            this->peers(this->peers_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peers");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_peers;
        if (input->ExpectTag(34)) goto parse_old_peers;
        break;
      }

      // repeated string old_peers = 4;
      case 4: {
        if (tag == 34) {
         parse_old_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_old_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->old_peers(this->old_peers_size() - 1).data(),
            this->old_peers(this->old_peers_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "old_peers");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_old_peers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.SnapshotMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.SnapshotMeta)
  return false;
#undef DO_
}

void SnapshotMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.SnapshotMeta)
  // required int64 last_included_index = 1;
  if (has_last_included_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_included_index(), output);
  }

  // required int64 last_included_term = 2;
  if (has_last_included_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_included_term(), output);
  }

  // repeated string peers = 3;
  for (int i = 0; i < this->peers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->peers(i).data(), this->peers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "peers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->peers(i), output);
  }

  // repeated string old_peers = 4;
  for (int i = 0; i < this->old_peers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->old_peers(i).data(), this->old_peers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "old_peers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->old_peers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.SnapshotMeta)
}

::google::protobuf::uint8* SnapshotMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:braft.SnapshotMeta)
  // required int64 last_included_index = 1;
  if (has_last_included_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_included_index(), target);
  }

  // required int64 last_included_term = 2;
  if (has_last_included_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_included_term(), target);
  }

  // repeated string peers = 3;
  for (int i = 0; i < this->peers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peers(i).data(), this->peers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->peers(i), target);
  }

  // repeated string old_peers = 4;
  for (int i = 0; i < this->old_peers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_peers(i).data(), this->old_peers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "old_peers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->old_peers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.SnapshotMeta)
  return target;
}

int SnapshotMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 last_included_index = 1;
    if (has_last_included_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_included_index());
    }

    // required int64 last_included_term = 2;
    if (has_last_included_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_included_term());
    }

  }
  // repeated string peers = 3;
  total_size += 1 * this->peers_size();
  for (int i = 0; i < this->peers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->peers(i));
  }

  // repeated string old_peers = 4;
  total_size += 1 * this->old_peers_size();
  for (int i = 0; i < this->old_peers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->old_peers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotMeta::MergeFrom(const SnapshotMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  peers_.MergeFrom(from.peers_);
  old_peers_.MergeFrom(from.old_peers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_included_index()) {
      set_last_included_index(from.last_included_index());
    }
    if (from.has_last_included_term()) {
      set_last_included_term(from.last_included_term());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotMeta::CopyFrom(const SnapshotMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SnapshotMeta::Swap(SnapshotMeta* other) {
  if (other != this) {
    std::swap(last_included_index_, other->last_included_index_);
    std::swap(last_included_term_, other->last_included_term_);
    peers_.Swap(&other->peers_);
    old_peers_.Swap(&other->old_peers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotMeta_descriptor_;
  metadata.reflection = SnapshotMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstallSnapshotRequest::kGroupIdFieldNumber;
const int InstallSnapshotRequest::kServerIdFieldNumber;
const int InstallSnapshotRequest::kPeerIdFieldNumber;
const int InstallSnapshotRequest::kTermFieldNumber;
const int InstallSnapshotRequest::kMetaFieldNumber;
const int InstallSnapshotRequest::kUriFieldNumber;
#endif  // !_MSC_VER

InstallSnapshotRequest::InstallSnapshotRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.InstallSnapshotRequest)
}

void InstallSnapshotRequest::InitAsDefaultInstance() {
  meta_ = const_cast< ::braft::SnapshotMeta*>(&::braft::SnapshotMeta::default_instance());
}

InstallSnapshotRequest::InstallSnapshotRequest(const InstallSnapshotRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:braft.InstallSnapshotRequest)
}

void InstallSnapshotRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  term_ = GOOGLE_LONGLONG(0);
  meta_ = NULL;
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstallSnapshotRequest::~InstallSnapshotRequest() {
  // @@protoc_insertion_point(destructor:braft.InstallSnapshotRequest)
  SharedDtor();
}

void InstallSnapshotRequest::SharedDtor() {
  if (group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_id_;
  }
  if (server_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_id_;
  }
  if (peer_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete peer_id_;
  }
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (this != default_instance_) {
    delete meta_;
  }
}

void InstallSnapshotRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstallSnapshotRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstallSnapshotRequest_descriptor_;
}

const InstallSnapshotRequest& InstallSnapshotRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fraft_2eproto();
  return *default_instance_;
}

InstallSnapshotRequest* InstallSnapshotRequest::default_instance_ = NULL;

InstallSnapshotRequest* InstallSnapshotRequest::New() const {
  return new InstallSnapshotRequest;
}

void InstallSnapshotRequest::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_group_id()) {
      if (group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_id_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        server_id_->clear();
      }
    }
    if (has_peer_id()) {
      if (peer_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        peer_id_->clear();
      }
    }
    term_ = GOOGLE_LONGLONG(0);
    if (has_meta()) {
      if (meta_ != NULL) meta_->::braft::SnapshotMeta::Clear();
    }
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uri_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstallSnapshotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.InstallSnapshotRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }

      // required string server_id = 2;
      case 2: {
        if (tag == 18) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "server_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_peer_id;
        break;
      }

      // required string peer_id = 3;
      case 3: {
        if (tag == 26) {
         parse_peer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_id().data(), this->peer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peer_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_term;
        break;
      }

      // required int64 term = 4;
      case 4: {
        if (tag == 32) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_meta;
        break;
      }

      // required .braft.SnapshotMeta meta = 5;
      case 5: {
        if (tag == 42) {
         parse_meta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_uri;
        break;
      }

      // required string uri = 6;
      case 6: {
        if (tag == 50) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.InstallSnapshotRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.InstallSnapshotRequest)
  return false;
#undef DO_
}

void InstallSnapshotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.InstallSnapshotRequest)
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // required string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_id(), output);
  }

  // required string peer_id = 3;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->peer_id(), output);
  }

  // required int64 term = 4;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->term(), output);
  }

  // required .braft.SnapshotMeta meta = 5;
  if (has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->meta(), output);
  }

  // required string uri = 6;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->uri(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.InstallSnapshotRequest)
}

::google::protobuf::uint8* InstallSnapshotRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:braft.InstallSnapshotRequest)
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // required string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  // required string peer_id = 3;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->peer_id(), target);
  }

  // required int64 term = 4;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->term(), target);
  }

  // required .braft.SnapshotMeta meta = 5;
  if (has_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->meta(), target);
  }

  // required string uri = 6;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->uri(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.InstallSnapshotRequest)
  return target;
}

int InstallSnapshotRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
    }

    // required string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

    // required string peer_id = 3;
    if (has_peer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_id());
    }

    // required int64 term = 4;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->term());
    }

    // required .braft.SnapshotMeta meta = 5;
    if (has_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->meta());
    }

    // required string uri = 6;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstallSnapshotRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstallSnapshotRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstallSnapshotRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstallSnapshotRequest::MergeFrom(const InstallSnapshotRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_peer_id()) {
      set_peer_id(from.peer_id());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_meta()) {
      mutable_meta()->::braft::SnapshotMeta::MergeFrom(from.meta());
    }
    if (from.has_uri()) {
      set_uri(from.uri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstallSnapshotRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallSnapshotRequest::CopyFrom(const InstallSnapshotRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallSnapshotRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_meta()) {
    if (!this->meta().IsInitialized()) return false;
  }
  return true;
}

void InstallSnapshotRequest::Swap(InstallSnapshotRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(peer_id_, other->peer_id_);
    std::swap(term_, other->term_);
    std::swap(meta_, other->meta_);
    std::swap(uri_, other->uri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstallSnapshotRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstallSnapshotRequest_descriptor_;
  metadata.reflection = InstallSnapshotRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstallSnapshotResponse::kTermFieldNumber;
const int InstallSnapshotResponse::kSuccessFieldNumber;
#endif  // !_MSC_VER

InstallSnapshotResponse::InstallSnapshotResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.InstallSnapshotResponse)
}

void InstallSnapshotResponse::InitAsDefaultInstance() {
}

InstallSnapshotResponse::InstallSnapshotResponse(const InstallSnapshotResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:braft.InstallSnapshotResponse)
}

void InstallSnapshotResponse::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_LONGLONG(0);
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstallSnapshotResponse::~InstallSnapshotResponse() {
  // @@protoc_insertion_point(destructor:braft.InstallSnapshotResponse)
  SharedDtor();
}

void InstallSnapshotResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstallSnapshotResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstallSnapshotResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstallSnapshotResponse_descriptor_;
}

const InstallSnapshotResponse& InstallSnapshotResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fraft_2eproto();
  return *default_instance_;
}

InstallSnapshotResponse* InstallSnapshotResponse::default_instance_ = NULL;

InstallSnapshotResponse* InstallSnapshotResponse::New() const {
  return new InstallSnapshotResponse;
}

void InstallSnapshotResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InstallSnapshotResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(term_, success_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstallSnapshotResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.InstallSnapshotResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // required bool success = 2;
      case 2: {
        if (tag == 16) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.InstallSnapshotResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.InstallSnapshotResponse)
  return false;
#undef DO_
}

void InstallSnapshotResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.InstallSnapshotResponse)
  // required int64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->term(), output);
  }

  // required bool success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.InstallSnapshotResponse)
}

::google::protobuf::uint8* InstallSnapshotResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:braft.InstallSnapshotResponse)
  // required int64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->term(), target);
  }

  // required bool success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.InstallSnapshotResponse)
  return target;
}

int InstallSnapshotResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->term());
    }

    // required bool success = 2;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstallSnapshotResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstallSnapshotResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstallSnapshotResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstallSnapshotResponse::MergeFrom(const InstallSnapshotResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstallSnapshotResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallSnapshotResponse::CopyFrom(const InstallSnapshotResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallSnapshotResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InstallSnapshotResponse::Swap(InstallSnapshotResponse* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstallSnapshotResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstallSnapshotResponse_descriptor_;
  metadata.reflection = InstallSnapshotResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeoutNowRequest::kGroupIdFieldNumber;
const int TimeoutNowRequest::kServerIdFieldNumber;
const int TimeoutNowRequest::kPeerIdFieldNumber;
const int TimeoutNowRequest::kTermFieldNumber;
#endif  // !_MSC_VER

TimeoutNowRequest::TimeoutNowRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.TimeoutNowRequest)
}

void TimeoutNowRequest::InitAsDefaultInstance() {
}

TimeoutNowRequest::TimeoutNowRequest(const TimeoutNowRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:braft.TimeoutNowRequest)
}

void TimeoutNowRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  term_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeoutNowRequest::~TimeoutNowRequest() {
  // @@protoc_insertion_point(destructor:braft.TimeoutNowRequest)
  SharedDtor();
}

void TimeoutNowRequest::SharedDtor() {
  if (group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_id_;
  }
  if (server_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_id_;
  }
  if (peer_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete peer_id_;
  }
  if (this != default_instance_) {
  }
}

void TimeoutNowRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeoutNowRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeoutNowRequest_descriptor_;
}

const TimeoutNowRequest& TimeoutNowRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fraft_2eproto();
  return *default_instance_;
}

TimeoutNowRequest* TimeoutNowRequest::default_instance_ = NULL;

TimeoutNowRequest* TimeoutNowRequest::New() const {
  return new TimeoutNowRequest;
}

void TimeoutNowRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_group_id()) {
      if (group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_id_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        server_id_->clear();
      }
    }
    if (has_peer_id()) {
      if (peer_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        peer_id_->clear();
      }
    }
    term_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeoutNowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.TimeoutNowRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }

      // required string server_id = 2;
      case 2: {
        if (tag == 18) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "server_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_peer_id;
        break;
      }

      // required string peer_id = 3;
      case 3: {
        if (tag == 26) {
         parse_peer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_id().data(), this->peer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peer_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_term;
        break;
      }

      // required int64 term = 4;
      case 4: {
        if (tag == 32) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.TimeoutNowRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.TimeoutNowRequest)
  return false;
#undef DO_
}

void TimeoutNowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.TimeoutNowRequest)
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // required string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_id(), output);
  }

  // required string peer_id = 3;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->peer_id(), output);
  }

  // required int64 term = 4;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->term(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.TimeoutNowRequest)
}

::google::protobuf::uint8* TimeoutNowRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:braft.TimeoutNowRequest)
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // required string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  // required string peer_id = 3;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->peer_id(), target);
  }

  // required int64 term = 4;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->term(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.TimeoutNowRequest)
  return target;
}

int TimeoutNowRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
    }

    // required string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

    // required string peer_id = 3;
    if (has_peer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_id());
    }

    // required int64 term = 4;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->term());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeoutNowRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeoutNowRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeoutNowRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeoutNowRequest::MergeFrom(const TimeoutNowRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_peer_id()) {
      set_peer_id(from.peer_id());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeoutNowRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeoutNowRequest::CopyFrom(const TimeoutNowRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeoutNowRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TimeoutNowRequest::Swap(TimeoutNowRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(peer_id_, other->peer_id_);
    std::swap(term_, other->term_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeoutNowRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeoutNowRequest_descriptor_;
  metadata.reflection = TimeoutNowRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeoutNowResponse::kTermFieldNumber;
const int TimeoutNowResponse::kSuccessFieldNumber;
#endif  // !_MSC_VER

TimeoutNowResponse::TimeoutNowResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:braft.TimeoutNowResponse)
}

void TimeoutNowResponse::InitAsDefaultInstance() {
}

TimeoutNowResponse::TimeoutNowResponse(const TimeoutNowResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:braft.TimeoutNowResponse)
}

void TimeoutNowResponse::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_LONGLONG(0);
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeoutNowResponse::~TimeoutNowResponse() {
  // @@protoc_insertion_point(destructor:braft.TimeoutNowResponse)
  SharedDtor();
}

void TimeoutNowResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeoutNowResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeoutNowResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeoutNowResponse_descriptor_;
}

const TimeoutNowResponse& TimeoutNowResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fraft_2eproto();
  return *default_instance_;
}

TimeoutNowResponse* TimeoutNowResponse::default_instance_ = NULL;

TimeoutNowResponse* TimeoutNowResponse::New() const {
  return new TimeoutNowResponse;
}

void TimeoutNowResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TimeoutNowResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(term_, success_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeoutNowResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:braft.TimeoutNowResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // required bool success = 2;
      case 2: {
        if (tag == 16) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:braft.TimeoutNowResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:braft.TimeoutNowResponse)
  return false;
#undef DO_
}

void TimeoutNowResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:braft.TimeoutNowResponse)
  // required int64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->term(), output);
  }

  // required bool success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:braft.TimeoutNowResponse)
}

::google::protobuf::uint8* TimeoutNowResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:braft.TimeoutNowResponse)
  // required int64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->term(), target);
  }

  // required bool success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:braft.TimeoutNowResponse)
  return target;
}

int TimeoutNowResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->term());
    }

    // required bool success = 2;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeoutNowResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeoutNowResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeoutNowResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeoutNowResponse::MergeFrom(const TimeoutNowResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeoutNowResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeoutNowResponse::CopyFrom(const TimeoutNowResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeoutNowResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TimeoutNowResponse::Swap(TimeoutNowResponse* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeoutNowResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeoutNowResponse_descriptor_;
  metadata.reflection = TimeoutNowResponse_reflection_;
  return metadata;
}


// ===================================================================

RaftService::~RaftService() {}

const ::google::protobuf::ServiceDescriptor* RaftService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* RaftService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftService_descriptor_;
}

void RaftService::pre_vote(::google::protobuf::RpcController* controller,
                         const ::braft::RequestVoteRequest*,
                         ::braft::RequestVoteResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method pre_vote() not implemented.");
  done->Run();
}

void RaftService::request_vote(::google::protobuf::RpcController* controller,
                         const ::braft::RequestVoteRequest*,
                         ::braft::RequestVoteResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method request_vote() not implemented.");
  done->Run();
}

void RaftService::append_entries(::google::protobuf::RpcController* controller,
                         const ::braft::AppendEntriesRequest*,
                         ::braft::AppendEntriesResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method append_entries() not implemented.");
  done->Run();
}

void RaftService::install_snapshot(::google::protobuf::RpcController* controller,
                         const ::braft::InstallSnapshotRequest*,
                         ::braft::InstallSnapshotResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method install_snapshot() not implemented.");
  done->Run();
}

void RaftService::timeout_now(::google::protobuf::RpcController* controller,
                         const ::braft::TimeoutNowRequest*,
                         ::braft::TimeoutNowResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method timeout_now() not implemented.");
  done->Run();
}

void RaftService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), RaftService_descriptor_);
  switch(method->index()) {
    case 0:
      pre_vote(controller,
             ::google::protobuf::down_cast<const ::braft::RequestVoteRequest*>(request),
             ::google::protobuf::down_cast< ::braft::RequestVoteResponse*>(response),
             done);
      break;
    case 1:
      request_vote(controller,
             ::google::protobuf::down_cast<const ::braft::RequestVoteRequest*>(request),
             ::google::protobuf::down_cast< ::braft::RequestVoteResponse*>(response),
             done);
      break;
    case 2:
      append_entries(controller,
             ::google::protobuf::down_cast<const ::braft::AppendEntriesRequest*>(request),
             ::google::protobuf::down_cast< ::braft::AppendEntriesResponse*>(response),
             done);
      break;
    case 3:
      install_snapshot(controller,
             ::google::protobuf::down_cast<const ::braft::InstallSnapshotRequest*>(request),
             ::google::protobuf::down_cast< ::braft::InstallSnapshotResponse*>(response),
             done);
      break;
    case 4:
      timeout_now(controller,
             ::google::protobuf::down_cast<const ::braft::TimeoutNowRequest*>(request),
             ::google::protobuf::down_cast< ::braft::TimeoutNowResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& RaftService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::braft::RequestVoteRequest::default_instance();
    case 1:
      return ::braft::RequestVoteRequest::default_instance();
    case 2:
      return ::braft::AppendEntriesRequest::default_instance();
    case 3:
      return ::braft::InstallSnapshotRequest::default_instance();
    case 4:
      return ::braft::TimeoutNowRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& RaftService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::braft::RequestVoteResponse::default_instance();
    case 1:
      return ::braft::RequestVoteResponse::default_instance();
    case 2:
      return ::braft::AppendEntriesResponse::default_instance();
    case 3:
      return ::braft::InstallSnapshotResponse::default_instance();
    case 4:
      return ::braft::TimeoutNowResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

RaftService_Stub::RaftService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RaftService_Stub::RaftService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
RaftService_Stub::~RaftService_Stub() {
  if (owns_channel_) delete channel_;
}

void RaftService_Stub::pre_vote(::google::protobuf::RpcController* controller,
                              const ::braft::RequestVoteRequest* request,
                              ::braft::RequestVoteResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void RaftService_Stub::request_vote(::google::protobuf::RpcController* controller,
                              const ::braft::RequestVoteRequest* request,
                              ::braft::RequestVoteResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void RaftService_Stub::append_entries(::google::protobuf::RpcController* controller,
                              const ::braft::AppendEntriesRequest* request,
                              ::braft::AppendEntriesResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void RaftService_Stub::install_snapshot(::google::protobuf::RpcController* controller,
                              const ::braft::InstallSnapshotRequest* request,
                              ::braft::InstallSnapshotResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void RaftService_Stub::timeout_now(::google::protobuf::RpcController* controller,
                              const ::braft::TimeoutNowRequest* request,
                              ::braft::TimeoutNowResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace braft

// @@protoc_insertion_point(global_scope)
